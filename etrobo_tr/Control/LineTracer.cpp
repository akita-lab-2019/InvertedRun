#include "LineTracer.h"

extern ev3api::GyroSensor gyro_sensor;
extern ev3api::Motor wheel_L;
extern ev3api::Motor wheel_R;

PID odom_pid;
// odom_pid = new PID();

float target_angle_list[] = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.41, 2.81, 4.22, 5.63, 7.03, 8.44, 9.84, 11.25, 12.66, 14.06, 15.47, 16.88, 18.28, 19.69, 21.09, 22.50, 23.91, 25.31, 26.72, 28.13, 29.53, 30.94, 32.34, 33.75, 35.16, 36.56, 37.97, 39.38, 40.78, 42.19, 43.59, 45.00, 46.41, 47.81, 49.22, 50.63, 52.03, 53.44, 54.84, 56.25, 57.66, 59.06, 60.47, 61.88, 63.28, 64.69, 66.09, 67.50, 68.91, 70.31, 71.72, 73.13, 74.53, 75.94, 77.34, 78.75, 80.16, 81.56, 82.97, 84.38, 85.78, 87.19, 88.59, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 91.20, 92.40, 93.60, 94.80, 96.00, 97.20, 98.40, 99.60, 100.80, 102.00, 103.20, 104.40, 105.60, 106.80, 108.00, 109.20, 110.40, 111.60, 112.80, 114.00, 115.20, 116.40, 117.60, 118.80, 120.00, 121.20, 122.40, 123.60, 124.80, 126.00, 127.20, 128.40, 129.60, 130.80, 132.00, 133.20, 134.40, 135.60, 136.80, 138.00, 139.20, 140.40, 141.60, 142.80, 144.00, 145.20, 146.40, 147.60, 148.80, 150.00, 151.20, 152.40, 153.60, 154.80, 156.00, 157.20, 158.40, 159.60, 160.80, 162.00, 163.20, 164.40, 165.60, 166.80, 168.00, 169.20, 170.40, 171.60, 172.80, 174.00, 175.20, 176.40, 177.60, 178.80, 180.00, 180.00, 180.00, 180.00, 181.55, 183.10, 184.66, 186.21, 187.76, 189.31, 190.86, 192.41, 193.97, 195.52, 197.07, 198.62, 200.17, 201.72, 203.28, 204.83, 206.38, 207.93, 209.48, 211.03, 212.59, 214.14, 215.69, 217.24, 218.79, 220.34, 221.90, 223.45, 225.00, 226.55, 228.10, 229.66, 231.21, 232.76, 234.31, 235.86, 237.41, 238.97, 240.52, 242.07, 243.62, 245.17, 246.72, 248.28, 249.83, 251.38, 252.93, 254.48, 256.03, 257.59, 259.14, 260.69, 262.24, 263.79, 265.34, 266.90, 268.45, 270.00, 271.55, 273.10, 274.66, 276.21, 277.76, 279.31, 280.86, 282.41, 283.97, 285.52, 287.07, 288.62, 290.17, 291.72, 293.28, 294.83, 296.38, 297.93, 299.48, 301.03, 302.59, 304.14, 305.69, 307.24, 308.79, 310.34, 311.90, 313.45, 315.00, 313.13, 311.25, 309.38, 307.50, 305.63, 303.75, 301.88, 300.00, 298.13, 296.25, 294.38, 292.50, 290.63, 288.75, 286.88, 285.00, 283.13, 281.25, 279.38, 277.50, 275.63, 273.75, 271.88, 270.00, 268.13, 266.25, 264.38, 262.50, 260.63, 258.75, 256.88, 255.00, 253.13, 251.25, 249.38, 247.50, 245.63, 243.75, 241.88, 240.00, 238.13, 236.25, 234.38, 232.50, 230.63, 228.75, 226.88, 225.00, 223.13, 221.25, 219.38, 217.50, 215.63, 213.75, 211.88, 210.00, 208.13, 206.25, 204.38, 202.50, 200.63, 198.75, 196.88, 195.00, 193.13, 191.25, 189.38, 187.50, 185.63, 183.75, 181.88, 180.00, 178.45, 176.90, 175.34, 173.79, 172.24, 170.69, 169.14, 167.59, 166.03, 164.48, 162.93, 161.38, 159.83, 158.28, 156.72, 155.17, 153.62, 152.07, 150.52, 148.97, 147.41, 145.86, 144.31, 142.76, 141.21, 139.66, 138.10, 136.55, 135.00, 133.45, 131.90, 130.34, 128.79, 127.24, 125.69, 124.14, 122.59, 121.03, 119.48, 117.93, 116.38, 114.83, 113.28, 111.72, 110.17, 108.62, 107.07, 105.52, 103.97, 102.41, 100.86, 99.31, 97.76, 96.21, 94.66, 93.10, 91.55, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 88.95, 87.91, 86.86, 85.81, 84.77, 83.72, 82.67, 81.63, 80.58, 79.53, 78.49, 77.44, 76.40, 75.35, 74.30, 73.26, 72.21, 71.16, 70.12, 69.07, 68.02, 66.98, 65.93, 64.88, 63.84, 62.79, 61.74, 60.70, 59.65, 58.60, 57.56, 56.51, 55.47, 54.42, 53.37, 52.33, 51.28, 50.23, 49.19, 48.14, 47.09, 46.05, 45.00, 43.95, 42.91, 41.86, 40.81, 39.77, 38.72, 37.67, 36.63, 35.58, 34.53, 33.49, 32.44, 31.40, 30.35, 29.30, 28.26, 27.21, 26.16, 25.12, 24.07, 23.02, 21.98, 20.93, 19.88, 18.84, 17.79, 16.74, 15.70, 14.65, 13.60, 12.56, 11.51, 10.47, 9.42, 8.37, 7.33, 6.28, 5.23, 4.19, 3.14, 2.09, 1.05, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -1.38, -2.77, -4.15, -5.54, -6.92, -8.31, -9.69, -11.08, -12.46, -13.85, -15.23, -16.62, -18.00, -19.38, -20.77, -22.15, -23.54, -24.92, -26.31, -27.69, -29.08, -30.46, -31.85, -33.23, -34.62, -36.00, -37.38, -38.77, -40.15, -41.54, -42.92, -44.31, -45.69, -47.08, -48.46, -49.85, -51.23, -52.62, -54.00, -55.38, -56.77, -58.15, -59.54, -60.92, -62.31, -63.69, -65.08, -66.46, -67.85, -69.23, -70.62, -72.00, -73.38, -74.77, -76.15, -77.54, -78.92, -80.31, -81.69, -83.08, -84.46, -85.85, -87.23, -88.62, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -91.61, -93.21, -94.82, -96.43, -98.04, -99.64, -101.25, -102.86, -104.46, -106.07, -107.68, -109.29, -110.89, -112.50, -114.11, -115.71, -117.32, -118.93, -120.54, -122.14, -123.75, -125.36, -126.96, -128.57, -130.18, -131.79, -133.39, -135.00, -133.42, -131.83, -130.25, -128.66, -127.08, -125.49, -123.91, -122.32, -120.74, -119.15, -117.57, -115.99, -114.40, -112.82, -111.23, -109.65, -108.06, -106.48, -104.89, -103.31, -101.73, -100.14, -98.56, -96.97, -95.39, -93.80, -92.22, -90.63, -89.05, -87.46, -85.88, -84.30, -82.71, -81.13, -79.54, -77.96, -76.37, -74.79, -73.20, -71.62, -70.04, -68.45, -66.87, -65.28, -63.70, -62.11, -60.53, -58.94, -57.36, -55.77, -54.19, -52.61, -51.02, -49.44, -47.85, -46.27, -44.68, -43.10, -41.51, -39.93, -38.35, -36.76, -35.18, -33.59, -32.01, -30.42, -28.84, -27.25, -25.67, -24.08, -22.50, -20.92, -19.33, -17.75, -16.16, -14.58, -12.99, -11.41, -9.82, -8.24, -6.65, -5.07, -3.49, -1.90, -0.32, 1.27, 2.85, 4.44, 6.02, 7.61, 9.19, 10.77, 12.36, 13.94, 15.53, 17.11, 18.70, 20.28, 21.87, 23.45, 25.04, 26.62, 28.20, 29.79, 31.37, 32.96, 34.54, 36.13, 37.71, 39.30, 40.88, 42.46, 44.05, 45.63, 47.22, 48.80, 50.39, 51.97, 53.56, 55.14, 56.73, 58.31, 59.89, 61.48, 63.06, 64.65, 66.23, 67.82, 69.40, 70.99, 72.57, 74.15, 75.74, 77.32, 78.91, 80.49, 82.08, 83.66, 85.25, 86.83, 88.42, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00};

/**
 * コンストラクタ
 * @param lineMonitor    ライン判定
 * @param invertedWalker 倒立走行
 */
LineTracer::LineTracer(Section *section,
                       TailWalker *tail_walker,
                       PID *pid,
                       Balancer *balancer)
    : m_section(section),
      m_tail_walker(tail_walker),
      m_pid(pid),
      m_balancer(balancer),
      m_is_initialized(false)
{
}

/**
 * 更新する
 */
void LineTracer::init()
{
    // モータエンコーダをリセットする
    wheel_L.reset();
    wheel_R.reset();

    // 倒立振子制御初期化
    m_balancer->init(0);

    float odom_pid_k[3] = {1, 0, 0};
    odom_pid.init(odom_pid_k);

    update();
}

/**
 * 初期化する
 */
void LineTracer::update()
{
    m_forward = m_section->getForward();
    m_curvature = m_section->getCurvature();
    m_section->getPidParm(m_pid_parm);
    m_color_target = m_section->getColorTarget();
    m_pid->init(m_pid_parm);
}

void LineTracer::setIsInverted(bool is_inverted)
{
    m_is_inverted = is_inverted;
}
void LineTracer::setForward(float forward)
{
    m_forward = forward;
}
void LineTracer::setCurvature(float curvature)
{
    m_curvature = curvature;
}
void LineTracer::setPidParm(float pid_param[3])
{
    m_pid_parm[0] = pid_param[0];
    m_pid_parm[1] = pid_param[1];
    m_pid_parm[2] = pid_param[2];
    m_pid->init(m_pid_parm);
}
void LineTracer::setColorTarget(float target)
{
    m_color_target = target;
}

/**
 * ライントレースする
 */
void LineTracer::run()
{
    if (m_is_initialized == false)
    {
        init();
        m_is_initialized = true;
    }

    // 旋回指令値を計算
    // m_turn = m_pid->calculate(0, getBrightnessGap());
    // m_turn = -odom_pid.calculate(90, getRobotPose(2));
    m_turn = -odom_pid.calculate(target_angle_list[(int)(getRobotDistance() * 100)], getRobotPose(2));
    m_turn += -1.0 * m_curvature; //曲率旋回量を加算

    // コースの識別
    // if (m_robot_info->getCourse() == 1)
    // {
    //     m_turn *= -1;
    // }

    if (m_forward < 0)
    {
        m_turn *= -1;
    }

    // 倒立走行と尻尾走行を振り分ける
    if (m_is_inverted)
    {
        invertedRun(m_forward, m_turn);
    }
    else
    {
        tailRun(m_forward, m_turn);
    }

    // 左右モータに回転を指示する
    wheel_L.setPWM(m_pwm[L]);
    wheel_R.setPWM(m_pwm[R]);

    // ブレーキは解除
    wheel_L.setBrake(false);
    wheel_R.setBrake(false);
}

/**
 * 倒立走行
 */
void LineTracer::invertedRun(int forward_v, int turn_v)
{
    // 倒立走行に必要な各種データを取得
    int angle = gyro_sensor.getAnglerVelocity(); // ジャイロセンサ値
    int wheel_cnt_R = getWheelDeg(0);            // 右モータ回転角度
    int wheel_cnt_L = getWheelDeg(1);            // 左モータ回転角度
    int battery = ev3_battery_voltage_mV();

    // 並進と旋回の指令値，各種データ与えてホイールの指令値を算出させる
    m_balancer->setCommand(forward_v, turn_v);
    // m_balancer->setCommand(forward_v, 0);
    m_balancer->update(angle, wheel_cnt_R, wheel_cnt_L, battery);
    m_pwm[L] = m_balancer->getPwmLeft();
    m_pwm[R] = m_balancer->getPwmRight();
}

/**
 * 尻尾走行
 */
void LineTracer::tailRun(int forward_v, int turn_v)
{
    // 並進と旋回の指令値を与えてホイールの指令値を算出させる
    m_tail_walker->setCommand(forward_v, turn_v);
    m_tail_walker->update();
    m_pwm[L] = m_tail_walker->getPwmLeft();
    m_pwm[R] = m_tail_walker->getPwmRight();
}
