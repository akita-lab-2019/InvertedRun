#include "LineTracer.h"

extern ev3api::GyroSensor gyro_sensor;
extern ev3api::Motor wheel_L;
extern ev3api::Motor wheel_R;

PID pid_odom_angle;
PID pid_odom_x;
PID pid_odom_y;

float target_angle_list[] = {0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 1.41, 2.81, 4.22, 5.63, 7.03, 8.44, 9.84, 11.25, 12.66, 14.06, 15.47, 16.88, 18.28, 19.69, 21.09, 22.50, 23.91, 25.31, 26.72, 28.13, 29.53, 30.94, 32.34, 33.75, 35.16, 36.56, 37.97, 39.38, 40.78, 42.19, 43.59, 45.00, 46.41, 47.81, 49.22, 50.63, 52.03, 53.44, 54.84, 56.25, 57.66, 59.06, 60.47, 61.88, 63.28, 64.69, 66.09, 67.50, 68.91, 70.31, 71.72, 73.13, 74.53, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 91.80, 93.60, 95.40, 97.20, 99.00, 100.80, 102.60, 104.40, 106.20, 108.00, 109.80, 111.60, 113.40, 115.20, 117.00, 118.80, 120.60, 122.40, 124.20, 126.00, 127.80, 129.60, 131.40, 133.20, 135.00, 136.80, 138.60, 140.40, 142.20, 144.00, 145.80, 147.60, 149.40, 151.20, 153.00, 154.80, 156.60, 158.40, 160.20, 162.00, 163.80, 165.60, 167.40, 169.20, 171.00, 172.80, 174.60, 176.40, 178.20, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 182.00, 184.00, 186.00, 188.00, 190.00, 192.00, 194.00, 196.00, 198.00, 200.00, 202.00, 204.00, 206.00, 208.00, 210.00, 212.00, 214.00, 216.00, 218.00, 220.00, 222.00, 224.00, 226.00, 228.00, 230.00, 232.00, 234.00, 236.00, 238.00, 240.00, 242.00, 244.00, 246.00, 248.00, 250.00, 252.00, 254.00, 256.00, 258.00, 260.00, 262.00, 264.00, 266.00, 268.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 270.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 180.00, 176.86, 173.72, 170.58, 167.44, 164.30, 161.16, 158.02, 154.88, 151.74, 148.60, 145.47, 142.33, 139.19, 136.05, 132.91, 129.77, 126.63, 123.49, 120.35, 117.21, 114.07, 110.93, 107.79, 104.65, 101.51, 98.37, 95.23, 92.09, 88.95, 85.81, 82.67, 79.53, 76.40, 73.26, 70.12, 66.98, 63.84, 60.70, 57.56, 54.42, 51.28, 48.14, 45.00, 41.86, 38.72, 35.58, 32.44, 29.30, 26.16, 23.02, 19.88, 16.74, 13.60, 10.47, 7.33, 4.19, 1.05, -2.09, -5.23, -8.37, -11.51, -14.65, -17.79, -20.93, -24.07, -27.21, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, 0.00, -1.38, -2.77, -4.15, -5.54, -6.92, -8.31, -9.69, -11.08, -12.46, -13.85, -15.23, -16.62, -18.00, -19.38, -20.77, -22.15, -23.54, -24.92, -26.31, -27.69, -29.08, -30.46, -31.85, -33.23, -34.62, -36.00, -37.38, -38.77, -40.15, -41.54, -42.92, -44.31, -45.69, -47.08, -48.46, -49.85, -51.23, -52.62, -54.00, -55.38, -56.77, -58.15, -59.54, -60.92, -62.31, -63.69, -65.08, -66.46, -67.85, -69.23, -70.62, -72.00, -73.38, -74.77, -76.15, -77.54, -78.92, -80.31, -81.69, -83.08, -84.46, -85.85, -87.23, -88.62, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -90.00, -91.61, -93.21, -94.82, -96.43, -98.04, -99.64, -101.25, -102.86, -104.46, -106.07, -107.68, -109.29, -110.89, -112.50, -114.11, -115.71, -117.32, -118.93, -120.54, -122.14, -123.75, -125.36, -126.96, -128.57, -130.18, -131.79, -133.39, -135.00, -133.42, -131.83, -130.25, -128.66, -127.08, -125.49, -123.91, -122.32, -120.74, -119.15, -117.57, -115.99, -114.40, -112.82, -111.23, -109.65, -108.06, -106.48, -104.89, -103.31, -101.73, -100.14, -98.56, -96.97, -95.39, -93.80, -92.22, -90.63, -89.05, -87.46, -85.88, -84.30, -82.71, -81.13, -79.54, -77.96, -76.37, -74.79, -73.20, -71.62, -70.04, -68.45, -66.87, -65.28, -63.70, -62.11, -60.53, -58.94, -57.36, -55.77, -54.19, -52.61, -51.02, -49.44, -47.85, -46.27, -44.68, -43.10, -41.51, -39.93, -38.35, -36.76, -35.18, -33.59, -32.01, -30.42, -28.84, -27.25, -25.67, -24.08, -22.50, -20.92, -19.33, -17.75, -16.16, -14.58, -12.99, -11.41, -9.82, -8.24, -6.65, -5.07, -3.49, -1.90, -0.32, 1.27, 2.85, 4.44, 6.02, 7.61, 9.19, 10.77, 12.36, 13.94, 15.53, 17.11, 18.70, 20.28, 21.87, 23.45, 25.04, 26.62, 28.20, 29.79, 31.37, 32.96, 34.54, 36.13, 37.71, 39.30, 40.88, 42.46, 44.05, 45.63, 47.22, 48.80, 50.39, 51.97, 53.56, 55.14, 56.73, 58.31, 59.89, 61.48, 63.06, 64.65, 66.23, 67.82, 69.40, 70.99, 72.57, 74.15, 75.74, 77.32, 78.91, 80.49, 82.08, 83.66, 85.25, 86.83, 88.42, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00};

float target_liner_list[15] = {0.00, 100, 1.07, 1.43, 1.43, 100, 100, -0.28, 100, 1.43, 100, 1.52, 100, 100, 1.90};

/**
 * コンストラクタ
 * @param lineMonitor    ライン判定
 * @param invertedWalker 倒立走行
 */
LineTracer::LineTracer(Section *section,
                       TailWalker *tail_walker,
                       PID *pid,
                       Balancer *balancer)
    : m_section(section),
      m_tail_walker(tail_walker),
      m_pid(pid),
      m_balancer(balancer),
      m_is_initialized(false)
{
}

/**
 * 更新する
 */
void LineTracer::init()
{
    // モータエンコーダをリセットする
    wheel_L.reset();
    wheel_R.reset();

    // 倒立振子制御初期化
    m_balancer->init(0);

    float pid_odom_angle_k[3] = {1, 0, 0};
    pid_odom_angle.init(pid_odom_angle_k);

    float pid_odom_x_k[3] = {50, 0, 0};
    pid_odom_x.init(pid_odom_x_k);

    float pid_odom_y_k[3] = {50, 0, 0};
    pid_odom_y.init(pid_odom_y_k);

    update();
}

/**
 * 初期化する
 */
void LineTracer::update()
{
    m_forward = m_section->getForward();
    m_curvature = m_section->getCurvature();
    m_section->getPidParm(m_pid_parm);
    m_color_target = m_section->getColorTarget();
    m_pid->init(m_pid_parm);
}

void LineTracer::setIsInverted(bool is_inverted)
{
    m_is_inverted = is_inverted;
}
void LineTracer::setForward(float forward)
{
    m_forward = forward;
}
void LineTracer::setCurvature(float curvature)
{
    m_curvature = curvature;
}
void LineTracer::setPidParm(float pid_param[3])
{
    m_pid_parm[0] = pid_param[0];
    m_pid_parm[1] = pid_param[1];
    m_pid_parm[2] = pid_param[2];
    m_pid->init(m_pid_parm);
}
void LineTracer::setColorTarget(float target)
{
    m_color_target = target;
}

/**
 * ライントレースする
 */
void LineTracer::run()
{
    if (m_is_initialized == false)
    {
        init();
        m_is_initialized = true;
    }

    // 走法の選択
    // 0: 通常ライントレース
    // 1: 角度追従
    // 2: x座標追従
    // 3: y座標追従
    int run_method_list[15] = {0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    int section_num = m_section->getSectionNum();
    switch (run_method_list[section_num])
    {
    case 0: // 通常ライントレース
        m_turn = m_pid->calculate(0, getBrightnessGap());
        m_turn += -1.0 * m_curvature; //曲率旋回量を加算
        break;

    case 1: // 角度追従
        m_turn = -pid_odom_angle.calculate(target_angle_list[(int)(getRobotDistance() * 100)], getRobotPose(2));
        break;

    case 2: // x座標追従
        m_turn = pid_odom_x.calculate(target_liner_list[section_num], getRobotPose(0));
        if (m_turn > 8)
            m_turn = 8;
        if (m_turn < -8)
            m_turn = -8;
        break;

    case 3: // y座標追従
        m_turn = -pid_odom_y.calculate(target_liner_list[section_num], getRobotPose(1));
        if (m_turn > 8)
            m_turn = 8;
        if (m_turn < -8)
            m_turn = -8;
        break;

    default:
        break;
    }

    // コースの識別
    // if (m_robot_info->getCourse() == 1)
    // {
    //     m_turn *= -1;
    // }

    if (m_forward < 0)
    {
        m_turn *= -1;
    }

    // 倒立走行と尻尾走行を振り分ける
    if (m_is_inverted)
    {
        invertedRun(m_forward, m_turn);
    }
    else
    {
        tailRun(m_forward, m_turn);
    }

    // 左右モータに回転を指示する
    wheel_L.setPWM(m_pwm[L]);
    wheel_R.setPWM(m_pwm[R]);

    // ブレーキは解除
    wheel_L.setBrake(false);
    wheel_R.setBrake(false);
}

/**
 * 倒立走行
 */
void LineTracer::invertedRun(int forward_v, int turn_v)
{
    // 倒立走行に必要な各種データを取得
    int angle = gyro_sensor.getAnglerVelocity(); // ジャイロセンサ値
    int wheel_cnt_R = getWheelDeg(0);            // 右モータ回転角度
    int wheel_cnt_L = getWheelDeg(1);            // 左モータ回転角度
    int battery = ev3_battery_voltage_mV();

    // 並進と旋回の指令値，各種データ与えてホイールの指令値を算出させる
    m_balancer->setCommand(forward_v, turn_v);
    // m_balancer->setCommand(forward_v, 0);
    m_balancer->update(angle, wheel_cnt_R, wheel_cnt_L, battery);
    m_pwm[L] = m_balancer->getPwmLeft();
    m_pwm[R] = m_balancer->getPwmRight();
}

/**
 * 尻尾走行
 */
void LineTracer::tailRun(int forward_v, int turn_v)
{
    // 並進と旋回の指令値を与えてホイールの指令値を算出させる
    m_tail_walker->setCommand(forward_v, turn_v);
    m_tail_walker->update();
    m_pwm[L] = m_tail_walker->getPwmLeft();
    m_pwm[R] = m_tail_walker->getPwmRight();
}
